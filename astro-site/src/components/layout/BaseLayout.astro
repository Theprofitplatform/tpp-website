---
import SEOHead from '../common/SEOHead.astro';
import StructuredData from '../common/StructuredData.astro';
import Analytics from '../common/Analytics.astro';
import Navigation from './Navigation.astro';
import Footer from './Footer.astro';

export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  currentPage?: string;
  ogTitle?: string;
  ogDescription?: string;
  ogImage?: string;
  canonicalURL?: string;
  pageType?: 'homepage' | 'service' | 'about' | 'contact';
  includeNavigation?: boolean;
  includeFooter?: boolean;
}

const {
  title = "Index | The Profit Platform - Sydney Digital Marketing",
  description = "Leading Index services in Sydney. Get results with The Profit Platform. ✓ Proven ROI ✓ 127+ Reviews ✓ Free Consultation",
  keywords = "Index, sydney, digital marketing, seo, google ads, web design",
  currentPage = 'home',
  ogTitle,
  ogDescription,
  ogImage,
  canonicalURL = "https://theprofitplatform.com.au/",
  pageType = 'homepage',
  includeNavigation = true,
  includeFooter = true
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <!-- SEO Meta Tags -->
    <SEOHead
        title={title}
        description={description}
        keywords={keywords}
        ogTitle={ogTitle}
        ogDescription={ogDescription}
        ogImage={ogImage}
        canonicalURL={canonicalURL}
        pageType="website"
    />

    <!-- Bundled CSS for Performance -->
    <link rel="stylesheet" href="/css/bundled.min.css" media="all">

    <!-- External Resources - Load asynchronously -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'" media="all">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'" media="all">
    <noscript>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    </noscript>

    <!-- Structured Data -->
    <StructuredData pageType={pageType} />

    <!-- Analytics -->
    <Analytics />
</head>
<body>
    {includeNavigation && <Navigation currentPage={currentPage} />}

    <!-- Main Content -->
    <main id="main-content" role="main">
        <slot />
    </main>

    {includeFooter && <Footer />}

    <!-- JavaScript Resources -->
    <script src="/js/combined.min.js" defer></script>
    <script src="/js/main.js" defer></script>
    <script src="/js/homepage.js" defer></script>
    <script src="/js/predictive-resource-loader.js" defer></script>

    <!-- Phase 2 Performance Testing -->
    <script src="/test-phase2-performance.js" defer></script>

    <!-- Phase 1: Inline Performance Testing -->
    <script>
        // Inline Performance Monitor (no external file needed)
        console.log('🧪 TPP Inline Performance Monitor Loading...');

        class SimplePerformanceMonitor {
            constructor() {
                this.metrics = {};
                this.init();
            }

            init() {
                console.log('📊 Simple Performance Monitor starting...');

                // Collect basic Core Web Vitals
                this.collectLCP();
                this.collectFID();
                this.collectCLS();

                // Show dashboard on Ctrl+Shift+P
                document.addEventListener('keydown', (e) => {
                    if (e.ctrlKey && e.shiftKey && e.key === 'P') {
                        this.showDashboard();
                    }
                });

                setTimeout(() => {
                    console.log('✅ Simple Performance Monitor ready!');
                    console.log('📈 Current metrics:', this.metrics);
                    console.log('🔍 Press Ctrl+Shift+P to view dashboard');
                }, 1000);
            }

            collectLCP() {
                if ('PerformanceObserver' in window) {
                    const observer = new PerformanceObserver((list) => {
                        for (const entry of list.getEntries()) {
                            this.metrics.lcp = Math.round(entry.startTime);
                            console.log('📏 LCP:', this.metrics.lcp + 'ms');
                        }
                    });
                    observer.observe({ entryTypes: ['largest-contentful-paint'] });
                }
            }

            collectFID() {
                if ('PerformanceObserver' in window) {
                    const observer = new PerformanceObserver((list) => {
                        for (const entry of list.getEntries()) {
                            this.metrics.fid = Math.round(entry.processingStart - entry.startTime);
                            console.log('⚡ FID:', this.metrics.fid + 'ms');
                        }
                    });
                    observer.observe({ entryTypes: ['first-input'] });
                }
            }

            collectCLS() {
                if ('PerformanceObserver' in window) {
                    let clsValue = 0;
                    const observer = new PerformanceObserver((list) => {
                        for (const entry of list.getEntries()) {
                            if (!entry.hadRecentInput) {
                                clsValue += entry.value;
                            }
                        }
                        this.metrics.cls = Math.round(clsValue * 1000) / 1000;
                        console.log('🔄 CLS:', this.metrics.cls);
                    });
                    observer.observe({ entryTypes: ['layout-shift'] });
                }
            }

            showDashboard() {
                const dashboard = `📊 TPP PERFORMANCE DASHBOARD
============================
🎯 LCP: ${this.metrics.lcp || 'measuring...'}ms (Target: <2500ms)
⚡ FID: ${this.metrics.fid || 'waiting for interaction...'}ms (Target: <100ms)
🔄 CLS: ${this.metrics.cls || 'measuring...'} (Target: <0.1)

🖼️ Images: ${document.images.length} total
📊 Page Load: ${Math.round(Date.now() - performance.timeOrigin)}ms
💾 Memory: ${navigator.deviceMemory || 'unknown'}GB
🌐 Connection: ${navigator.connection?.effectiveType || 'unknown'}`;

                alert(dashboard);
                console.log(dashboard);
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Initializing TPP Performance Monitor...');
            window.tppPerformanceMonitor = new SimplePerformanceMonitor();
        });
    </script>
</body>
</html>